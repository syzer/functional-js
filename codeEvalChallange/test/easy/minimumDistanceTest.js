/**
 * Created by syzer on 3/22/2015.
 */
/*
 Minimum Distance
 https://www.codeeval.com/open_challenges/189/
 Challenge Description:
 Alice is looking for a sorority to join for her first year at Acme University. There is a street consisting entirely of sorority houses near the university, and some of her high school friends have already joined sorority houses on the street. (More than one of her friends may live at the same sorority house.)
 Alice wants to visit her friends frequently, and needs a program that will help her pick an optimal house to visit them from. Each sorority house has a street number that indicates its location on the street. The optimal location will minimize the sum of differences between the number of Alice's house and the number of her friends' houses.

 For example: Alice's friends live at houses 3, 3, 5, and 7. Alice moves in at house 4. Then the distances to her friends' houses are 1, 1, 1, and 3, totaling 6.
 Input sample:

 The input consists of several integers on a line, separated by spaces.
 The first integer F contains the number of friends (0 < F < 100). Then F street addresses A follow (0 < A < 10000).
 Output sample:

 Print a line containing the minimal sum of distances for an optimal sorority location.

 For example:
 Constraints:

 Number of friends: 0 < F < 100
 Street addresses: 0 < A < 10000
 Number of test cases is 10.

 */

var expect = require('chai').expect;
var SRC_DIR = './../../src/easy/'; // run on over the test

var lib = require(SRC_DIR + 'minimumDistance');
var _ = require('lodash');

var input = [
    '4 3 3 5 7',
    '3 20 30 40',
    '4 3 5688 2270 8998'
].join('\n');

var output = [
    '6',
    '20',
    '12413'
].join('\n');

var inputFull = [
    '57 4627 757 2324 4508 6681 2822 401 2433 3229 9439 6551 806 9917 458 2768 1214 9035 7582 3065 1761 7758 8765 2456 5109 7690 4248 3051 5525 2428 4797 795 3696 8321 6829 5196 9064 1493 9254 7135 215 2053 3706 7467 902 6328 5701 1094 3973 7999 3941 9256 3250 8561 8169 6463 8954 4715',
    '50 9494 2157 1164 8683 3913 2549 9258 4084 7651 9120 6007 8108 3655 1465 9574 1980 2207 7338 158 1614 3634 835 6076 7506 1254 1860 5905 2057 3513 4486 4300 1404 8140 3592 7906 9618 731 6854 8749 6552 526 2851 2309 2190 6856 3505 7438 4227 7785 9469',
    '3 4749 2860 3067',
    '10 8539 6897 511 7807 3017 8890 7182 7480 781 2128',
    '52 2989 7787 4444 4096 6724 6338 6131 6703 4081 2062 6049 1019 6592 4445 7967 3585 1811 2756 2198 2842 3719 8545 5508 9283 6845 1306 1060 2444 3337 9493 8336 9126 5280 9650 2763 6140 3165 4683 6580 6878 2732 7156 3709 8662 2309 3473 167 2281 6575 2618 2153 9452',
    '3 20 30 40',
    '15 5976 8094 1945 549 4453 8367 6529 6682 1938 3127 6607 1260 97 3326 5529',
    '3 5688 2270 8998',
    '4 3 3 5 7',
    '63 3900 904 3700 5544 2083 6709 5099 6990 9269 1896 7991 9871 6770 3785 6809 7818 5283 7322 6430 8063 6047 7426 5158 6515 2440 7209 4381 4043 2816 2318 2154 2723 9580 3718 9916 5672 6339 1059 9843 1423 889 8749 4075 8981 2274 1728 9193 2831 7831 4588 8822 3239 805 3984 4052 3893 7725 7046 9978 6857 8355 7312 6654'
].join('\n');

var inputFull2 = [
    '55 3661 3927 2083 5209 8045 3468 2598 7706 5835 4519 7890 5370 4482 5163 3915 6775 8464 1139 3300 1326 4915 4399 3042 7934 4317 9128 1773 7454 1269 7895 1661 1062 8357 1642 4742 9240 916 3873 1493 5517 9064 8617 5077 9702 8601 4212 4084 2191 3539 1403 7990 6441 8211 441 2207',
    '74 9795 9148 9582 2609 8092 9227 125 9378 1167 1622 2190 845 5369 3280 7618 1332 114 5997 7521 1598 3660 7726 3419 2464 3843 2234 6216 7202 4979 5346 7602 787 7350 2748 4861 5149 5210 1386 2498 7473 2365 6533 5554 394 6941 6965 442 8837 6338 8252 4363 5660 9653 3345 447 6229 7376 3632 9095 7236 2552 6602 9119 9130 5029 5183 3491 1815 3378 9913 8745 8742 7648 6825',
    '52 3041 8018 4009 6247 6576 2003 3707 1008 7290 6102 373 1438 5005 7435 6589 8738 1884 5162 586 2053 7288 6262 559 2108 7394 3649 225 587 7325 8727 2669 764 5592 7683 4049 9039 6592 7572 4504 9676 5361 4103 4203 1238 1335 1173 2985 6144 3805 6608 7573 5677',
    '79 240 1390 1267 5278 766 5402 4766 8131 6476 4719 506 8318 1369 4169 7399 5519 9690 7963 7800 4839 8998 4160 8818 1378 1652 7546 8682 4782 526 4573 3790 2633 6828 3458 4603 7969 3788 1634 3062 4326 2128 4723 4908 679 4630 637 271 577 8086 7745 6328 30 5774 143 4251 7754 3760 9656 1467 7582 322 441 2011 1179 5115 7510 6850 9204 2217 946 50 1772 801 8658 2114 7472 7576 6888 2448',
    '80 5994 8692 3886 9948 3200 1955 3537 3759 5162 9019 8578 2445 119 130 8134 5504 2996 8960 2589 3699 6761 76 2803 8415 7963 5495 1331 2869 4371 3367 2706 9141 3470 1074 9935 1275 2255 9412 2195 5575 5062 274 2697 6346 8561 740 3415 9815 9719 8677 5602 6067 6193 1277 253 3512 7284 6486 3345 7060 6869 3069 8544 1329 6986 9397 7576 3656 4153 6988 5947 1577 5480 8421 9823 3358 1540 3588 4366 5428',
    '4 3 3 5 7',
    '22 6040 8387 2557 6448 6290 7338 6562 2701 3851 7433 4695 9144 2015 5181 9515 503 4332 8873 6793 3779 4169 887',
    '3 20 30 40',
    '3 4749 2860 3067',
    '98 3140 9604 5727 4861 5468 6264 4246 9343 2115 9030 4593 9103 611 2201 9944 4256 7155 7469 9663 5169 6733 1070 2393 7024 8016 3298 3536 2355 307 2455 5515 6450 6781 2676 779 9040 1634 5935 7238 8078 8876 2998 1136 5422 5137 5622 6786 2761 2398 5379 26 8777 4949 1860 7209 3643 1399 4427 1560 873 8063 7600 4631 9756 6317 1265 1799 8761 6539 2531 9894 2358 6097 3985 2094 9540 5940 5720 8891 7482 3768 772 2514 7624 8386 2972 4036 2582 6358 7842 3095 7864 8425 1342 29 1716 6508 9473'
].join('\n');

describe('minimumDistance', function () {

    afterEach(function (done) {
        setTimeout(done, 60);
    });

    it('can run', function (done) {
        var out = lib.run(input);
        console.log('out:\n', out);
        expect(out).eql(output);
        done();
    });

    //it('can run on full sample', function (done) {
    //    var out = lib.run(inputFull);
    //    console.log('out:\n', out);
    //    //expect(out).eql(output);
    //    done();
    //});

    it('can run on full sample2', function (done) {
        var out = lib.run(inputFull2);
        console.log('out:\n', out);
        //expect(out).eql(output);
        done();
    });

});
