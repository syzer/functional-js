/*
 Given a sequence, write a program to detect cycles within it.
 Input sample:

 Your program should accept as its first argument a path to a filename containing a sequence of numbers (space delimited). The file can have multiple such lines. E.g
 Output sample:

 Print to stdout the first cycle you find in each sequence. Ensure that there are no trailing empty spaces on each line you print. E.g.

 The cycle detection problem is explained more widely on wiki
 Constrains:
 The elements of the sequence are integers in range [0, 99]
 The length of the sequence is in range [0, 50]
 */

var expect = require('chai').expect;
var SRC_DIR = './../../src/medium/'; // run on over the test

var lib = require(SRC_DIR + 'cycleDetection');
var _ = require('lodash');

var input = [
    '2 0 6 3 1 6 3 1 6 3 1',
    '3 4 8 0 11 9 7 2 5 6 10 1 49 49 49 49',
    '1 2 3 1 2 3 1 2 3'
].join('\n');

var output = [
    '6 3 1',
    '49',
    '1 2 3'
].join('\n');

var inputFull = [
    '11 9 6 4 2 7 1 8 10 5 3 0 64 69 33 44 70 82 59 30 62 64 69 33 44 70 82 59 30 62 64 69 33 44 70 82 59 30 62 64 69 33 44 70 82 59 30 62',
    '6 21 3 23 37 44 27 1 35 11 33 38 43 36 22 31 28 17 12 9 29 42 18 30 4 2 41 10 15 39 20 8 16 19 13 7 32 0 24 14 34 40 25 26 64 72 5 90 50 68 64 72 5 90 50 68 64 72 5 90 50 68 64 72 5 90 50 68',
    '30 24 22 29 19 13 26 5 7 16 6 3 28 1 17 2 21 15 23 10 11 4 18 25 9 14 0 82 20 12 70 27 64 8 74 82 20 12 70 27 64 8 74 82 20 12 70 27 64 8 74 82 20 12 70 27 64 8 74',
    '11 2 7 5 13 6 0 10 4 1 12 8 9 19 15 40 42 3 96 19 15 40 42 3 96 19 15 40 42 3 96 19 15 40 42 3 96',
    '12 28 14 0 5 25 29 10 30 27 31 24 4 6 15 33 8 16 26 17 11 32 18 20 2 23 19 13 9 7 21 22 58 1 34 72 49 3 80 58 1 34 72 49 3 80 58 1 34 72 49 3 80 58 1 34 72 49 3 80',
    '6 10 5 4 8 0 13 14 7 3 2 11 1 12 71 41 43 83 30 9 45 71 41 43 83 30 9 45 71 41 43 83 30 9 45 71 41 43 83 30 9 45',
    '8 17 2 11 13 16 18 10 1 0 9 12 3 4 5 14 7 15 84 39 83 6 36 88 84 39 83 6 36 88 84 39 83 6 36 88 84 39 83 6 36 88',
    '7 10 2 1 6 8 0 5 3 4 9 85 71 35 85 71 35 85 71 35 85 71 35',
    '15 8 4 13 17 19 14 16 10 12 0 1 3 18 7 11 2 9 6 5 82 47 48 78 70 39 40 59 82 47 48 78 70 39 40 59 82 47 48 78 70 39 40 59 82 47 48 78 70 39 40 59',
    '4 56 56 56 56 56 56 56 56 56 56',
    '35 25 40 21 32 34 15 19 37 9 5 10 39 2 29 27 4 20 22 16 13 24 26 17 18 30 1 36 43 33 6 28 7 31 38 12 14 23 11 41 0 3 8 86 75 78 42 71 86 75 78 42 71 86 75 78 42 71 86 75 78 42 71',
    '0 5 6 1 2 3 7 8 4 86 34 76 21 86 34 76 21 86 34 76 21 86 34 76 21',
    '4 16 2 18 14 8 11 9 13 19 7 0 1 6 3 5 12 10 15 17 20 45 28 43 49 32 45 28 43 49 32 45 28 43 49 32 45 28 43 49 32',
    '15 25 4 7 14 28 43 13 10 37 0 17 6 22 20 5 1 29 46 41 32 47 34 24 44 16 38 18 33 35 12 9 42 3 30 31 39 19 40 23 11 2 27 21 36 45 8 97 66 85 79 90 26 54 96 45 8 97 66 85 79 90 26 54 96 45 8 97 66 85 79 90 26 54 96 45 8 97 66 85 79 90 26 54 96',
    '23 24 36 33 34 13 27 20 11 10 3 4 18 19 17 7 31 25 12 32 9 5 35 1 28 8 29 6 2 14 15 16 21 26 30 22 82 64 0 60 49 66 22 82 64 0 60 49 66 22 82 64 0 60 49 66 22 82 64 0 60 49 66',
    '1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3',
    '17 12 13 6 3 2 4 7 0 16 8 5 15 11 10 9 14 61 37 42 28 32 1 91 83 81 61 37 42 28 32 1 91 83 81 61 37 42 28 32 1 91 83 81 61 37 42 28 32 1 91 83 81',
    '9 6 7 8 4 11 3 12 10 2 5 0 74 83 1 73 89 59 82 63 14 74 83 1 73 89 59 82 63 14 74 83 1 73 89 59 82 63 14 74 83 1 73 89 59 82 63 14',
    '2 0 5 18 14 11 16 8 3 17 13 4 6 7 12 15 1 10 9 83 83 83 83',
    '0 3 2 1 2 1 2 1'
].join('\n');

describe('happyNumber', function () {

    afterEach(function (done) {
        setTimeout(done, 60);
    });

    it('can run', function (done) {
        var out = lib.run(input);
        console.log('out:\n', out);
        expect(out).eql(output);
        done();
    });
});
