/**
 * Created by syzer on 12/19/2014.
 */
//https://gist.github.com/syzer/a5ebde3031d76744397e
var _ = require('lodash');

function doStuffNumberPlusOneTimes(number, fun) {
    "use strict";

    // we want decouple this
    if ('function'!== typeof fun) {
        throw new TypeError('Must be function');
    }
    if ('print'=== fun.name) {
        throw new Error('Cannot print');
    }
    if ('number' !== typeof number) {
        throw new TypeError('Must be number');
    }

    // string number concat error here!
    return _.times(number + 1, function (n) {
        fun(n)
    });
}

function print() {
    return console.log(arguments);
}

// comes from library
// curry unary combinators
function curry(fn) {
    return function curried(a, optionalB) {
        if (arguments.length > 1) {
            return fn.call(this, a, optionalB);
        } else {
            return function partiallyApplied(b) {
                return fn.call(this, a, b);
            }
        }
    }
}

// comes from library
var before = curry(
    function decorate(decoration, method) {
        return function decoratedWithBefore() {
            decoration.apply(this, arguments);
            return method.apply(this, arguments);
        };
    }
);

// AKA class number with getters setters
// and a lot of boring autogenerated code
function fNum(number) {
    if ('number' !== typeof number) {
        throw new TypeError('Must be number');
    }
    return number;
}

function cannotPrint(fun) {
    if ('function'!== typeof fun) {
        throw new TypeError('Must be function');
    }
    if ('print'=== fun.name) {
        throw new Error('Cannot print');
    }
    return fun;
}

var firstNum = before(function () {
    fNum(arguments[0]);
    return arguments;
});

var secondCannotBePrint = before(function () {
    cannotPrint(arguments[1]);
    return arguments;
});

function doStuffNumberPlusOneTimes(number, otherParam) {
    return _.times(number + 1, function (n) {
        otherParam(n)
    });
}

// js is awesome
var doStuffNumberPlusOneTimes = firstNum(secondCannotBePrint(doStuffNumberPlusOneTimes));

doStuffNumberPlusOneTimes(5, console.warn);         // 6 times
//doStuffNumberPlusOneTimes(5, print);              // cannot print
//doStuffNumberPlusOneTimes('5', console.log);      // 51 times
